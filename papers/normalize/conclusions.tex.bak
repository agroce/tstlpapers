\section{Conclusions and Future Work}

This paper presents test case normalization and generalization, first
steps towards a goal we suspect can only be approximated: providing
users of automated testing with a \emph{single test case, as short and
  simple as possible, for each underlying fault in the SUT}, where
that test case 1) produces a failure due to the fault and 2) includes
annotations describing the general conditions under which the fault
manifests as failure.  This is the ideal; normalization moves toward
this ideal by rewriting numerous distinct failing test cases into a
smaller set of simpler test cases, and generalization is a
first-effort at an annotation method for describing the core structure
of a failure, separating essential and accidental aspects of a test
case.  Our algorithms rely on the ability of TSTL \cite{NFM15,ISSTA15}, a language for
defining test cases for automated testing, to define simplification
and experiments for generalization in a form amenable to simple
rewriting, which can apply to any SUT and any language.

Our current implementation is meant to serve as a useful starting
point for further development.  TSTL is available in a working version
\cite{tstl} that supports normalization and generalization, and the
normalization and generalization implementations are designed to allow
the easy addition of further rewrite rules that can move testing closer to
the goal of ``one test case to rule them all.''

It is also likely that adopting a goal of normalization, not just
reduction, may be possible in settings other than TSTL/action-based
testing.  The difficulties of defining a normal form for, e.g.,
Javascript \cite{jsfunfuzz} or C \cite{CReduce} test cases are
formidable, but even less effective normalization and generalization
might aid debugging and assist ``fuzzer taming'' \cite{PLDI13}.  Additionally, while
normalization may be difficult in other settings, simple
generalization (e.g., is this numeric constant essential, can these
two statements be swapped?) seems easy to define even for complex
programming language inputs.
