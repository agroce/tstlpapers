Test case reduction has long been seen as critical for automated testing. However, traditional test case reduction simply reduces the length of a test case, but does not attempt to reduce semantic complexity. This paper extends previous efforts with algorithms for normalizing and generalizing test cases. Rewriting test cases into a normal form can reduce semantic complexity and even remove steps from an already delta-debugged test case. Moreover, normalization dramatically reduces the number of test cases that a reader must examine, partially addressing the “fuzzer taming” problem of discovering distinct faults in a set of failing tests. Generalization, in contrast, takes a test case and reports what aspects of the test could have been changed while preserving the property that the test fails. Normalization plus generalization aids understanding of test cases, including tests for complex and widely used APIs such as the NumPy numeric computation library and the ArcPy GIS scripting package. Normalization frequently reduces the number of test cases to be examined by well over an order of magnitude, and often to just one test case per fault. Together, ideally, normalization and generalization allow a user to replace reading a large set of test cases that vary in unimportant ways with reading one annotated summary test case.
